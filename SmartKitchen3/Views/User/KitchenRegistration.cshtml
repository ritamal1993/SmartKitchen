@model SmartKitchen3.Models.Kitchen

<br />
<form action="KitchenRegistration" method="post">
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter kitchen name" } })
        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })

    </div>

    <div class="form-group" id="locationField">
        <label class="control-label">Kitchen Address</label>
        <input id="autocomplete"
               placeholder="Enter kitchen address"
               onFocus="geolocate()"
               type="text"
               class="form-control" />
    </div>

    <div class="form-group">
        @Html.EditorFor(m => m.LocationLatitudes, new { htmlAttributes = new { @class = "form-control", type = "hidden", id = "lat" } })
    </div>
    <div class="form-group">
        @Html.EditorFor(m => m.LocationLongitude, new { htmlAttributes = new { @class = "form-control", type = "hidden", id = "lng" } })
    </div>
    <div class="form-group">
        <input type="submit" value="CONTINUE" class="btn btn-sm btn-success" />
    </div>
</form>


<script>
    var autocomplete;

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['geometry']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        document.getElementById("lat").value = place.geometry.location.lat();
        document.getElementById("lng").value = place.geometry.location.lng();
    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDLAbL-WI0BQMa9FDV7U-Dxb_VuSGtlQCk&libraries=places&callback=initAutocomplete"
        async defer></script>

@*@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}


}*@
