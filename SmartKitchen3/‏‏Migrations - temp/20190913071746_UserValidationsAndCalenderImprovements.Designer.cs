// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartKitchen.Data;

namespace SmartKitchen.Migrations
{
    [DbContext(typeof(LocalContext))]
    [Migration("20190913071746_UserValidationsAndCalenderImprovements")]
    partial class UserValidationsAndCalenderImprovements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartKitchen.Models.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("CalendarId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("SmartKitchen.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SmartKitchen.Models.ImportantDate", b =>
                {
                    b.Property<DateTime>("Date");

                    b.Property<int?>("CalendarId");

                    b.Property<int>("CalendatId");

                    b.Property<string>("Image");

                    b.Property<string>("NotificationMessage");

                    b.Property<DateTime>("NotificationStartDateTime");

                    b.HasKey("Date");

                    b.HasIndex("CalendarId");

                    b.ToTable("ImportantDate");
                });

            modelBuilder.Entity("SmartKitchen.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Measure");

                    b.Property<string>("Name");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("SmartKitchen.Models.Kitchen", b =>
                {
                    b.Property<int>("KitchenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("LocationLatitudes");

                    b.Property<double?>("LocationLongitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("KitchenId");

                    b.ToTable("Kitchen");
                });

            modelBuilder.Entity("SmartKitchen.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<int>("CategoryId");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Instructions");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Title");

                    b.Property<string>("VideoUrl");

                    b.HasKey("RecipeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("SmartKitchen.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeId");

                    b.Property<int>("IngredientId");

                    b.Property<int>("Quantity");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredient");
                });

            modelBuilder.Entity("SmartKitchen.Models.Stock", b =>
                {
                    b.Property<int>("KitchenId");

                    b.Property<int>("IngredientId");

                    b.Property<int>("Quantity");

                    b.HasKey("KitchenId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("SmartKitchen.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Admin");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("KitchenId");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasIndex("KitchenId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SmartKitchen.Models.UserCalendar", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CalendarId");

                    b.HasKey("UserId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("UserCalendar");
                });

            modelBuilder.Entity("SmartKitchen.Models.ImportantDate", b =>
                {
                    b.HasOne("SmartKitchen.Models.Calendar", "Calendar")
                        .WithMany("ImportantDates")
                        .HasForeignKey("CalendarId");
                });

            modelBuilder.Entity("SmartKitchen.Models.Recipe", b =>
                {
                    b.HasOne("SmartKitchen.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartKitchen.Models.RecipeIngredient", b =>
                {
                    b.HasOne("SmartKitchen.Models.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredient")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartKitchen.Models.Recipe", "Recipe")
                        .WithMany("RecipeIngredient")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartKitchen.Models.Stock", b =>
                {
                    b.HasOne("SmartKitchen.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartKitchen.Models.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartKitchen.Models.User", b =>
                {
                    b.HasOne("SmartKitchen.Models.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartKitchen.Models.UserCalendar", b =>
                {
                    b.HasOne("SmartKitchen.Models.Calendar", "Calendar")
                        .WithMany("UserCalendar")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartKitchen.Models.User", "User")
                        .WithMany("UserCalendar")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
